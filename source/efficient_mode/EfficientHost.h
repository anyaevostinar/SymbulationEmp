#ifndef EFFHOST_H
#define EFFHOST_H

#include "../default_mode/Host.h"
#include "EfficientOrganism.h"
#include "EfficientWorld.h"

class EfficientHost: public Host, public EfficientOrganism {
protected:

  /**
    *
    * Purpose: Represents the efficiency of a host.
    *
  */
  double efficiency;

  /**
    *
    * Purpose: Represents the world that the efficient hosts are living in.
    *
  */
  emp::Ptr<EfficientWorld> my_world = NULL;
public:
  /**
   * The constructor for efficient host
   */
  EfficientHost(emp::Ptr<emp::Random> _random, emp::Ptr<EfficientWorld> _world, emp::Ptr<SymConfigBase> _config,
  double _intval =0.0, emp::vector<emp::Ptr<BaseSymbiont>> _syms = {},
  emp::vector<emp::Ptr<BaseSymbiont>> _repro_syms = {},
  double _points = 0.0, double _efficient = 0.1) :
  Host(_random, _world, _config, _intval, _syms, _repro_syms, _points),
  Organism(_config, _world, _random, _points) {
    efficiency = _efficient;
    my_world = _world;
  }


  /**
   * Input: None
   *
   * Output: None
   *
   * Purpose: To force a copy constructor to be generated by the compiler.
   */
  EfficientHost(const EfficientHost &) = default;


  /**
   * Input: None
   *
   * Output: None
   *
   * Purpose: To force a move constructor to be generated by the compiler
   */
  EfficientHost(EfficientHost &&) = default;


  /**
   * Input: None
   *
   * Output: None
   *
   * Purpose: To tell the compiler to use its default generated variants of the constructor
   */
  EfficientHost() = default;

  /**
  * Input: None
  * 
  * Output: Name of class as string, EfficientHost
  *
  * Purpose: To know which subclass the object is
  */
  std::string const GetName() {
    return  "EfficientHost";
  }

  /**
   * Input: Efficiency value
   *
   * Output: None
   *
   * Purpose: Setting an efficient symbiont's efficiency value.
   */
  void SetEfficiency(double _in) {
    if(_in > 1 || _in < 0) throw "Invalid efficiency chance. Must be between 0 and 1 (inclusive)";
    efficiency = _in;
  }

  /**
   * Input: None
   *
   * Output: A double representing the symbiont's efficiency.
   *
   * Purpose: Getting an efficient symbiont's efficiency value.
   */
  double GetEfficiency() {return efficiency;}

  /**
   * Input: None.
   *
   * Output: A new host with same properties as this host.
   *
   * Purpose: To avoid creating an organism via constructor in other methods.
   */
  emp::Ptr<Organism> MakeNew(){
    emp::Ptr<EfficientHost> host_baby = emp::NewPtr<EfficientHost>(random, my_world, my_config, GetIntVal());
    host_baby->SetEfficiency(GetEfficiency());
    return host_baby;
  }
};
#endif
